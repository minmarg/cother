# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package ddms;
use base qw(Exporter);
use base qw(DynaLoader);
package ddmsc;
bootstrap ddms;
package ddms;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package ddms;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package ddms;

*new_intArray = *ddmsc::new_intArray;
*delete_intArray = *ddmsc::delete_intArray;
*intArray_getitem = *ddmsc::intArray_getitem;
*intArray_setitem = *ddmsc::intArray_setitem;

############# Class : ddms::CSO_DDMS ##############

package ddms::CSO_DDMS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ddms );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = ddmsc::new_CSO_DDMS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ddmsc::delete_CSO_DDMS($self);
        delete $OWNER{$self};
    }
}

*GetUnrollingDegree = *ddmsc::CSO_DDMS_GetUnrollingDegree;
*GetOptionDSTSEGM = *ddmsc::CSO_DDMS_GetOptionDSTSEGM;
*GetDScoreApprox = *ddmsc::CSO_DDMS_GetDScoreApprox;
*GetDScoreApproxScore00 = *ddmsc::CSO_DDMS_GetDScoreApproxScore00;
*GetDScoreApproxScore200 = *ddmsc::CSO_DDMS_GetDScoreApproxScore200;
*GetDScoreMaxDst = *ddmsc::CSO_DDMS_GetDScoreMaxDst;
*GetDScoreTheta = *ddmsc::CSO_DDMS_GetDScoreTheta;
*GetDScoreAbsDiffExp = *ddmsc::CSO_DDMS_GetDScoreAbsDiffExp;
*GetDScoreAvgDistExp = *ddmsc::CSO_DDMS_GetDScoreAvgDistExp;
*GetDScoreGranularity = *ddmsc::CSO_DDMS_GetDScoreGranularity;
*GetDPNSegments = *ddmsc::CSO_DDMS_GetDPNSegments;
*GetDPHeuristic = *ddmsc::CSO_DDMS_GetDPHeuristic;
*GetDPStep = *ddmsc::CSO_DDMS_GetDPStep;
*GetDPBandFraction = *ddmsc::CSO_DDMS_GetDPBandFraction;
*GetIgnoreCode = *ddmsc::CSO_DDMS_GetIgnoreCode;
*GetErrorCode = *ddmsc::CSO_DDMS_GetErrorCode;
*PrintTable = *ddmsc::CSO_DDMS_PrintTable;
*CalculateDDMS = *ddmsc::CSO_DDMS_CalculateDDMS;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package ddms;

*CSO_DDMS_UNROLLING_DEGREE = *ddmsc::CSO_DDMS_UNROLLING_DEGREE;
*COTHER_OPTION_DSTSEGM = *ddmsc::COTHER_OPTION_DSTSEGM;
*CSO_DDMS_DScore_Approx = *ddmsc::CSO_DDMS_DScore_Approx;
*CSO_DDMS_DScore_Approx_Score00 = *ddmsc::CSO_DDMS_DScore_Approx_Score00;
*CSO_DDMS_DScore_Approx_Score200 = *ddmsc::CSO_DDMS_DScore_Approx_Score200;
*CSO_DDMS_DScore_MaxDst = *ddmsc::CSO_DDMS_DScore_MaxDst;
*CSO_DDMS_DScore_MaxDst_inv = *ddmsc::CSO_DDMS_DScore_MaxDst_inv;
*CSO_DDMS_DScore_Theta = *ddmsc::CSO_DDMS_DScore_Theta;
*CSO_DDMS_DScore_AbsDiffExp = *ddmsc::CSO_DDMS_DScore_AbsDiffExp;
*CSO_DDMS_DScore_AvgDistExp = *ddmsc::CSO_DDMS_DScore_AvgDistExp;
*CSO_DDMS_DScore_Granularity = *ddmsc::CSO_DDMS_DScore_Granularity;
*CSO_DDMS_DP_NSEGM = *ddmsc::CSO_DDMS_DP_NSEGM;
*CSO_DDMS_DP_HEURISTIC = *ddmsc::CSO_DDMS_DP_HEURISTIC;
*CSO_DDMS_DP_STEP = *ddmsc::CSO_DDMS_DP_STEP;
*CSO_DDMS_DP_BAND_FRACTION = *ddmsc::CSO_DDMS_DP_BAND_FRACTION;
*CSO_DDMS_IGNORE_CODE = *ddmsc::CSO_DDMS_IGNORE_CODE;
*CSO_DDMS_ERR_CODE = *ddmsc::CSO_DDMS_ERR_CODE;
1;
